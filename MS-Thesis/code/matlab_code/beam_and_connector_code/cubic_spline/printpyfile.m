function printpyfile(filepath,N,wire_dia,spring_height,spring_max_radius,...
    spring_initial_radius,plate_thickness,friction_spring_stiff_top,friction_spring_stiff_bottom,...
    springyoungmodulus,radialspring_stiffness,radialspring_tension)
% This function will print out the abaqus.py file with the corresponding
% geomteric paramters
q = char(39);
fID = fopen(strcat(filepath,'MyModel.py'),'w');

fprintf(fID,'#--------------------------Inputs from MATLAB-----------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Variables and inputs that will be given by Matlab\n');
fprintf(fID,'"""\n');
fprintf(fID,'\n');
fprintf(fID,'#set working directory\n');
fprintf(fID,'import os\n');
fprintf(fID,strcat('mainfilepath = ',q,filepath(1:end-1),q,'# to be given by matlab\n'));
fprintf(fID,'os.chdir(mainfilepath)\n');
fprintf(fID,'\n');
fprintf(fID,strcat('statusfile  = open(mainfilepath+',q,'/status.txt',q,',',q,'w',q,')\n'));
fprintf(fID,'statusfile.write("1")\n');
fprintf(fID,'statusfile.close()\n');
fprintf(fID,'\n');
fprintf(fID,'#-----------spring parameters-----------\n');
fprintf(fID,'#note dimensions are in mm we are using SI ''mm'' units so for stress we have MPa, Mass-tonne,density-tonne/mm**3\n');
fprintf(fID,strcat('wire_dia=',num2str(wire_dia) ,'#wire diameter (mm)\n'));
fprintf(fID,strcat('spring_initial_radius=',num2str(spring_initial_radius),' #initial radius of the spring (mm)\n'));
fprintf(fID,strcat('spring_max_radius=',num2str(spring_max_radius) ,'#maximum radius of the spring (mm)\n'));
fprintf(fID,strcat('spring_height=',num2str(spring_height),' #height of the spring (mm)\n'));
fprintf(fID,strcat('spring_Np=',num2str(N) ,'#number of points in the spring\n'));
fprintf(fID,'#--------parameters of the plates--------\n');
fprintf(fID,strcat('plate_thickness=',num2str(plate_thickness),' #plate thickness\n'));
fprintf(fID,'bottom_center= (0.0,0.0,0.0) #bottom plate center coordinate(tuple)#xyz to be in accordance with abaqus (loading in Y direction)\n');
fprintf(fID,'top_center= (0.0,spring_height+2*plate_thickness+wire_dia,0.0) #top plate center coordinates(tuple)#xyz to be in accordance with abaqus (loading in Y direction)\n');
fprintf(fID,'plate_radius=spring_max_radius*2\n');
fprintf(fID,'#-------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#Material properties variables (independent definition)\n');
fprintf(fID,strcat('springyoungmodulus=',num2str(springyoungmodulus),'#Mpa\n'));
fprintf(fID,'poissonratio=0.3\n');
fprintf(fID,strcat('springDisplacement=',num2str(1.5*25.4-(spring_height+(wire_dia))),'#mm\n'));
fprintf(fID,'springmeshSize=10.0\n');
fprintf(fID,'\n');
fprintf(fID,'eps=10**-6\n');
fprintf(fID,'axialspring_stiffness= 10**8#N/mm\n');
fprintf(fID,strcat('radialspring_stiffness=', num2str(radialspring_stiffness),'#N/mm\n'));
fprintf(fID,strcat('radialspring_tension=',num2str(radialspring_tension),'#N/mm\n'));
fprintf(fID,'pos_refpt_spring_topturn=20#mm\n');
fprintf(fID,strcat('friction_spring_stiff_top=',num2str(friction_spring_stiff_top),'#N/mm\n'));
fprintf(fID,strcat('friction_spring_stiff_bottom=',num2str(friction_spring_stiff_bottom),'#N/mm\n'));
fprintf(fID,'#------------------------Read Coordinate Text File-------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Read xyz coordinates of the spring from the file\n');
fprintf(fID,'(This file is printed by MATLAB and path to be given by Matlab)\n');
fprintf(fID,'"""\n');
fprintf(fID,'##NOTE: MATLAB to give xyz coordinates such that the Z coordinates are in axial direction,\n');
fprintf(fID,'#we are doing a manipulation by interchangin Y and Z coordinates here\n');
fprintf(fID,'\n');
fprintf(fID,'filename=''coordinatefile''\n');
fprintf(fID,strcat('filepath= ',q,filepath,q,' + filename + ''.txt''\n'));
fprintf(fID,'fid=open(filepath,''r'')\n');
fprintf(fID,'spring_coord = [];spring_identifier=[]\n');
fprintf(fID,'for i in range(spring_Np):\n');
fprintf(fID,'\ttemp= fid.readline().split()\n');
fprintf(fID,'\ttemp=[float(j) for j in temp]#convert the coordinate strings to float\n');
fprintf(fID,'\tspring_identifier.append(temp[0])\n');
fprintf(fID,'\ta=temp[-2]\n');
fprintf(fID,'\ttemp[-2]=temp[-1]+plate_thickness+(wire_dia/2)\n');
fprintf(fID,'\ttemp[-1]=-a\n');
fprintf(fID,'\tspring_coord.append(temp[2:])\n');
fprintf(fID,'\n');
fprintf(fID,'fid.close\n');
fprintf(fID,'#--------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#--------------------------------------------------------------------------#\n');
fprintf(fID,'#-------------------------ABAQUS Main File---------------------------------#\n');
fprintf(fID,'#--------------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'"""\n');
fprintf(fID,'Abaqus scripting begins\n');
fprintf(fID,'"""\n');
fprintf(fID,'from abaqus import *\n');
fprintf(fID,'from abaqusConstants import *\n');
fprintf(fID,'\n');
fprintf(fID,'#creating a model\n');
fprintf(fID,'springModel=mdb.Model(name=''Spring'')\n');
fprintf(fID,'\n');
fprintf(fID,'#-----------------------------------Parts------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create all geometric parts and prepare them for adequate meshing by partitioning them\n');
fprintf(fID,'"""\n');
fprintf(fID,'import part\n');
fprintf(fID,'\n');
fprintf(fID,'#------part for spring-------------------------------------------------------------------\n');
fprintf(fID,'#create a part for the spring\n');
fprintf(fID,'springPart = springModel.Part(name=''Spring'',dimensionality= THREE_D, type=DEFORMABLE_BODY)\n');
fprintf(fID,'#creating wire spline for the spring using sprign coordinates\n');
fprintf(fID,'springWire=springPart.WirePolyLine(points=spring_coord,mergeType=SEPARATE, meshable=ON, smoothClosedSpline=ON)\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------Parts creadted-------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Material----------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Materials with material properties for plate and spring\n');
fprintf(fID,'"""\n');
fprintf(fID,'import material\n');
fprintf(fID,'#create material\n');
fprintf(fID,'springMaterial = springModel.Material(name=''Spring Material'',description=''spring steel'')\n');
fprintf(fID,'#assign youngs modulus and poissons ratio to both the materials\n');
fprintf(fID,'springelasticProperties= (springyoungmodulus,poissonratio)\n');
fprintf(fID,'springMaterial.Elastic(table=(springelasticProperties,))\n');
fprintf(fID,'#--------------------------------Materials Created---------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------Beam profile ------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create crosssectional profile for the Beam elements\n');
fprintf(fID,'"""\n');
fprintf(fID,'#creating the beam cross section for spring\n');
fprintf(fID,'springProfile = springModel.CircularProfile(name=''Circular'',r=wire_dia/2)\n');
fprintf(fID,'#-----------------Beam profile ------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Section and Orientation----------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Sections for the different Properties and assign them to the respective parts\n');
fprintf(fID,'"""\n');
fprintf(fID,'import section\n');
fprintf(fID,'\n');
fprintf(fID,'#creating beam section for spring\n');
fprintf(fID,'springSection = springModel.BeamSection(name=''Spring Section'',integration=DURING_ANALYSIS,profile=springProfile.name,material=springMaterial.name)\n');
fprintf(fID,'#section assignements to spring\n');
fprintf(fID,'wireregion = springPart.edges\n');
fprintf(fID,'springPart.SectionAssignment(region=(wireregion,),sectionName = springSection.name)\n');
fprintf(fID,'\n');
fprintf(fID,'#beam orientation assignment here\n');
fprintf(fID,'"""\n');
fprintf(fID,'For defining we are taking a reference vector, the global Y vector. We find the Tangential vector\n');
fprintf(fID,'using coordinates of the ith edge and find the cross product with the reference vector. This new vector ,n1,\n');
fprintf(fID,'is essentially orthogonal to the tangential vector we just need to assign this as the orientation of the beam\n');
fprintf(fID,'"""\n');
fprintf(fID,'#y=(0.0,1.0,0.0) #global y vector\n');
fprintf(fID,'#The cross product t x y comes out to be (-t3,0,t1)\n');
fprintf(fID,'for i in range(len(springPart.edges)-1):\n');
fprintf(fID,'\txt=spring_coord[i+1][0]-spring_coord[i][0]#x component\n');
fprintf(fID,'\tyt=spring_coord[i+1][1]-spring_coord[i][1]#y component\n');
fprintf(fID,'\tzt=spring_coord[i+1][2]-spring_coord[i][2]#z component\n');
fprintf(fID,'\tlent=(xt**2+yt**2+zt**2)**(0.5)#length of edge tangential vector\n');
fprintf(fID,'\tt=(xt/lent,yt/lent,zt/lent)# edge tangential vector\n');
fprintf(fID,'\tn1=(-1*t[2],0.0,t[0])#cross product of t x y #hard coded here\n');
fprintf(fID,'\tregion=springPart.edges.findAt(((spring_coord[i+1][0]+spring_coord[i][0])/2,\n');
fprintf(fID,'\t(spring_coord[i+1][1]+spring_coord[i][1])/2,(spring_coord[i+1][2]+spring_coord[i][2])/2)) #finding cooresponding edge using mid point of edge\n');
fprintf(fID,'\tspringPart.assignBeamSectionOrientation(method=N1_COSINES,region=(region,),n1=n1)\n');
fprintf(fID,'#-----------------------------Sections and orientation created-------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Assembly----------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Assemble instances of the parts into a global coordinate system\n');
fprintf(fID,'"""\n');
fprintf(fID,'import assembly\n');
fprintf(fID,'import regionToolset\n');
fprintf(fID,'#create part instances\n');
fprintf(fID,'springAssembly =springModel.rootAssembly\n');
fprintf(fID,'springInstance=springAssembly.Instance(name=''Spring Instance'',part=springPart,dependent=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Mesh----------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Mesh for the instances in the assembly and create sets of nodes for application of BC\n');
fprintf(fID,'"""\n');
fprintf(fID,'import mesh\n');
fprintf(fID,'\n');
fprintf(fID,'##code for meshing the spring\n');
fprintf(fID,'#select type of element and assign to the instance\n');
fprintf(fID,'elemType = mesh.ElemType(elemCode=B32,elemLibrary=STANDARD)\n');
fprintf(fID,'springAssembly.setElementType(regions=(springInstance.edges,),elemTypes=(elemType,))\n');
fprintf(fID,'#seed the instance\n');
fprintf(fID,'springAssembly.seedPartInstance(regions=(springInstance,),size=springmeshSize)\n');
fprintf(fID,'#mesh the instance\n');
fprintf(fID,'springAssembly.generateMesh(regions=(springInstance,))\n');
fprintf(fID,'#------------------------------Mesh created--------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#assign variables to coordinates of reference points\n');
fprintf(fID,'ref_pt_bottom_center=(bottom_center[0],bottom_center[1]+plate_thickness+wire_dia/2,bottom_center[2])\n');
fprintf(fID,'ref_pt_top_center=(top_center[0],top_center[1]-plate_thickness-wire_dia/2,top_center[2])\n');
fprintf(fID,'ref_bottom_loading_pt=(bottom_center[0],bottom_center[1]+plate_thickness+wire_dia/2-spring_height/4,bottom_center[2]) #taking a distance of spring_height/4 of the loading pt\n');
fprintf(fID,'ref_top_loading_pt=(top_center[0],top_center[1]-plate_thickness-wire_dia/2+spring_height/4,top_center[2]) #taking a distance of spring_height/4 of the loading pt\n');
fprintf(fID,'#ref_rotation_pt=((spring_coord[0][0],spring_coord[0][1],spring_coord[0][2]-ref5_dist))\n');
fprintf(fID,'#create reference points using above coordinates\n');
fprintf(fID,'springAssembly.ReferencePoint(ref_pt_bottom_center)\n');
fprintf(fID,'springAssembly.ReferencePoint(ref_pt_top_center)\n');
fprintf(fID,'springAssembly.ReferencePoint(ref_bottom_loading_pt)\n');
fprintf(fID,'springAssembly.ReferencePoint(ref_top_loading_pt)\n');
fprintf(fID,'#springAssembly.ReferencePoint(ref_rotation_pt)\n');
fprintf(fID,'\n');
fprintf(fID,'rp1=springAssembly.referencePoints.findAt(ref_pt_bottom_center)\n');
fprintf(fID,'bottomcenterSet=springAssembly.Set(name=''Bottom Center Ref pt'',referencePoints = (rp1,))\n');
fprintf(fID,'##rp1=regionToolset.Region(referencePoints=(rp1,))#need to create regions because the TwoPointSpringDashpot method requires sequence of region objects\n');
fprintf(fID,'\n');
fprintf(fID,'rp2=springAssembly.referencePoints.findAt(ref_pt_top_center)\n');
fprintf(fID,'topcenterSet=springAssembly.Set(name=''Top Center Ref pt'',referencePoints = (rp2,))\n');
fprintf(fID,'\n');
fprintf(fID,'#This loop creates springs on the lower and upper halves of the spring using spring_identifier[i] to detect wheather to make or not\n');
fprintf(fID,'#also the loop is making connectors with non-linear behavior to simulate the contacts. These connectors are connected to a reference point on either of the plates and corresponding spring point\n');
fprintf(fID,'\n');
fprintf(fID,'import connectorBehavior   # required for connectors\n');
fprintf(fID,'#datum Csys required for connector orientation\n');
fprintf(fID,'connector_datum1=springAssembly.DatumCsysByThreePoints(name=''Connector Datum1'',coordSysType= CARTESIAN, origin=bottom_center,point1=(bottom_center[0],bottom_center[1]+plate_thickness,bottom_center[2]),\n');
fprintf(fID,'point2=(bottom_center[0],bottom_center[1], bottom_center[2]+plate_radius));\n');
fprintf(fID,'connector_datum2=springAssembly.DatumCsysByThreePoints(name=''Connector Datum2'',coordSysType= CARTESIAN, origin=bottom_center,point1=(bottom_center[0],bottom_center[1]-plate_thickness,bottom_center[2]),\n');
fprintf(fID,'point2=(bottom_center[0],bottom_center[1], bottom_center[2]+plate_radius));\n');
fprintf(fID,'connector_datum1=springAssembly.datums[connector_datum1.id]#datum object\n');
fprintf(fID,'connector_datum2=springAssembly.datums[connector_datum2.id]\n');
fprintf(fID,'\n');
fprintf(fID,'bottomplateSet=[]\n');
fprintf(fID,'topplateSet=[]\n');
fprintf(fID,'bottomturnSet=[]\n');
fprintf(fID,'topturnSet=[]\n');
fprintf(fID,'bottomcollector=[]\n');
fprintf(fID,'\n');
fprintf(fID,'for i in range(len(spring_identifier)):\n');
fprintf(fID,'\n');
fprintf(fID,'\tif  spring_identifier[i]==1:\n');
fprintf(fID,'\n');
fprintf(fID,'\t\trpi=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\ttemp=springInstance.vertices.getByBoundingSphere(center=spring_coord[i],radius=eps)\n');
fprintf(fID,'\t\tbottomturnSet.append(temp)\n');
fprintf(fID,'\t\t#creating radial connector connecting the center pt with the dead turn spring pts (radial connector)\n');
fprintf(fID,'\t\t#create datum csys for connector\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.DatumCsysByThreePoints(name=''Connector Datum#''+str(i),coordSysType= CARTESIAN, origin=ref_pt_bottom_center,point1=spring_coord[i],\n');
fprintf(fID,'\t\tpoint2=bottom_center);\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.datums[temp_datum.id]\n');
fprintf(fID,'\t\tconnector_len=((spring_coord[i][0]-ref_pt_bottom_center[0])**2+(spring_coord[i][1]-ref_pt_bottom_center[1])**2+(spring_coord[i][2]-ref_pt_bottom_center[2])**2)**0.5\n');
fprintf(fID,'\t\t#create elasticity for connector\n');
fprintf(fID,'\t\ttemp_behavior=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-radialspring_stiffness*(10*spring_initial_radius),\n');
fprintf(fID,'\t\t-(10*spring_initial_radius)),(0,-(connector_len-eps-spring_initial_radius)),(0,0),(radialspring_tension*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1, ))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\t#connector section definition\n');
fprintf(fID,'\t\ttemp_sec1=springModel.ConnectorSection(name=''non-linear-radial ''+str(i),translationalType=AXIAL,behaviorOptions=(temp_behavior,))\n');
fprintf(fID,'\t\t#create wire for connector\n');
fprintf(fID,'\t\ttempwire=springAssembly.WirePolyLine(points=((rp1),(rpi)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt(((spring_coord[i][0]+ref_pt_bottom_center[0])/2,(spring_coord[i][1]+ref_pt_bottom_center[1])/2,(spring_coord[i][2]+ref_pt_bottom_center[2])/2))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec1.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=temp_datum)\n');
fprintf(fID,'\n');
fprintf(fID,'\telif  spring_identifier[i]==2:\n');
fprintf(fID,'\n');
fprintf(fID,'\t\trpi=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\ttemp=springInstance.vertices.getByBoundingSphere(center=spring_coord[i],radius=eps)\n');
fprintf(fID,'\t\t#bottomturnSet.append(temp)\n');
fprintf(fID,'\t\t#creating radial connector connecting the center pt with the dead turn spring pts (radial connector)\n');
fprintf(fID,'\t\t#create datum csys for connector\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.DatumCsysByThreePoints(name=''Connector Datum#''+str(i),coordSysType= CARTESIAN, origin=ref_pt_bottom_center,point1=spring_coord[i],\n');
fprintf(fID,'\t\tpoint2=bottom_center);\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.datums[temp_datum.id]\n');
fprintf(fID,'\t\tconnector_len=((spring_coord[i][0]-ref_pt_bottom_center[0])**2+(spring_coord[i][1]-ref_pt_bottom_center[1])**2+(spring_coord[i][2]-ref_pt_bottom_center[2])**2)**0.5\n');
fprintf(fID,'\t\t#create elasticity for connector\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_behavior=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-radialspring_stiffness*(10*spring_initial_radius),\n');
fprintf(fID,'\t\t-(10*spring_initial_radius)),(0,-(connector_len-eps-spring_initial_radius)),(0,0),(radialspring_tension*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1, ))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\t#connector section definition\n');
fprintf(fID,'\t\ttemp_sec1=springModel.ConnectorSection(name=''non-linear-radial ''+str(i),translationalType=AXIAL,behaviorOptions=(temp_behavior,))\n');
fprintf(fID,'\t\t#create wire for connector\n');
fprintf(fID,'\t\ttempwire=springAssembly.WirePolyLine(points=((rp1),(rpi)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt(((spring_coord[i][0]+ref_pt_bottom_center[0])/2,(spring_coord[i][1]+ref_pt_bottom_center[1])/2,(spring_coord[i][2]+ref_pt_bottom_center[2])/2))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec1.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=temp_datum)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[0][1]-wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref point on bottom plate will be same as spring coord only that Y=plate y\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+spring_coord[i][1]-spring_coord[0][1]),\n');
fprintf(fID,'\t\t-(spring_height+spring_coord[i][1]-spring_coord[0][1])),(-eps*(spring_coord[i][1]-spring_coord[0][1]),-(spring_coord[i][1]+eps-spring_coord[0][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-bottom ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\t\t#connector assignment\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum1)\n');
fprintf(fID,'\t\tbottomplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[-1][1]+wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref pointon bottom plate wil be same as spring coord only that Y=0\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+(spring_coord[-1][1]-spring_coord[i][1])),\n');
fprintf(fID,'\t\t-(spring_height+(spring_coord[-1][1]-spring_coord[i][1]))),(-eps*(spring_coord[-1][1]-spring_coord[i][1]),-(spring_coord[-1][1]+eps-spring_coord[i][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-top ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum2)\n');
fprintf(fID,'\t\ttopplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\telif spring_identifier[i]==3:\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[0][1]-wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref point on bottom plate will be same as spring coord only that Y=plate y\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+spring_coord[i][1]-spring_coord[0][1]),\n');
fprintf(fID,'\t\t-(spring_height+spring_coord[i][1]-spring_coord[0][1])),(-eps*(spring_coord[i][1]-spring_coord[0][1]),-(spring_coord[i][1]+eps-spring_coord[0][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-bottom ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\t\t#connector assignment\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum1)\n');
fprintf(fID,'\t\tbottomplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[-1][1]+wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref pointon bottom plate wil be same as spring coord only that Y=0\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+(spring_coord[-1][1]-spring_coord[i][1])),\n');
fprintf(fID,'\t\t-(spring_height+(spring_coord[-1][1]-spring_coord[i][1]))),(-eps*(spring_coord[-1][1]-spring_coord[i][1]),-(spring_coord[-1][1]+eps-spring_coord[i][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-top ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum2)\n');
fprintf(fID,'\t\ttopplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\telif spring_identifier[i]==4:\n');
fprintf(fID,'\t\trpi=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\ttemp=springInstance.vertices.getByBoundingSphere(center=spring_coord[i],radius=eps)\n');
fprintf(fID,'\t\t#topturnSet.append(temp)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.DatumCsysByThreePoints(name=''Connector Datum#''+str(i),coordSysType= CARTESIAN, origin=ref_pt_top_center,point1=spring_coord[i],\n');
fprintf(fID,'\t\tpoint2=top_center);\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.datums[temp_datum.id]\n');
fprintf(fID,'\n');
fprintf(fID,'\t\tconnector_len=((spring_coord[i][0]-ref_pt_top_center[0])**2+(spring_coord[i][1]-ref_pt_top_center[1])**2+(spring_coord[i][2]-ref_pt_top_center[2])**2)**0.5\n');
fprintf(fID,'\t\t#create elasticity for connector\n');
fprintf(fID,'\t\ttemp_behavior=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-radialspring_stiffness*(10*spring_initial_radius),\n');
fprintf(fID,'\t\t-(10*spring_initial_radius)),(0,-(connector_len-eps-spring_initial_radius)),(0,0),(radialspring_tension*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1, ))\n');
fprintf(fID,'\t\t#connector section definition\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-radial ''+str(i),translationalType=AXIAL,behaviorOptions=(temp_behavior,))\n');
fprintf(fID,'\t\t#create wire for connector\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((rp2),(rpi)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt(((spring_coord[i][0]+ref_pt_top_center[0])/2,(spring_coord[i][1]+ref_pt_top_center[1])/2,(spring_coord[i][2]+ref_pt_top_center[2])/2))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=temp_datum)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[0][1]-wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref point on bottom plate will be same as spring coord only that Y=plate y\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+spring_coord[i][1]-spring_coord[0][1]),\n');
fprintf(fID,'\t\t-(spring_height+spring_coord[i][1]-spring_coord[0][1])),(-eps*(spring_coord[i][1]-spring_coord[0][1]),-(spring_coord[i][1]+eps-spring_coord[0][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-bottom ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\t\t#connector assignment\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum1)\n');
fprintf(fID,'\t\tbottomplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\th=spring_coord[-1][1]+wire_dia/2\n');
fprintf(fID,'\t\tspringAssembly.ReferencePoint((spring_coord[i][0],h,spring_coord[i][2]));#ref pointon bottom plate wil be same as spring coord only that Y=0\n');
fprintf(fID,'\t\ttemp_refpt=springAssembly.referencePoints.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\ttemp_spring_pt=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((temp_refpt),(temp_spring_pt)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-axialspring_stiffness*(spring_height+(spring_coord[-1][1]-spring_coord[i][1])),\n');
fprintf(fID,'\t\t-(spring_height+(spring_coord[-1][1]-spring_coord[i][1]))),(-eps*(spring_coord[-1][1]-spring_coord[i][1]),-(spring_coord[-1][1]+eps-spring_coord[i][1])),(0,0),\n');
fprintf(fID,'\t\t(eps*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-axial-top ''+str(i),translationalType=SLOT,behaviorOptions=(temp,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt((spring_coord[i][0],h,spring_coord[i][2]))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=connector_datum2)\n');
fprintf(fID,'\t\ttopplateSet.append(temp_refpt)\n');
fprintf(fID,'\n');
fprintf(fID,'\telif spring_identifier[i]==5:\n');
fprintf(fID,'\t\trpi=springInstance.vertices.findAt(spring_coord[i])\n');
fprintf(fID,'\t\ttemp=springInstance.vertices.getByBoundingSphere(center=spring_coord[i],radius=eps)\n');
fprintf(fID,'\t\ttopturnSet.append(temp)\n');
fprintf(fID,'\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.DatumCsysByThreePoints(name=''Connector Datum#''+str(i),coordSysType= CARTESIAN, origin=ref_pt_top_center,point1=spring_coord[i],\n');
fprintf(fID,'\t\tpoint2=top_center);\n');
fprintf(fID,'\t\ttemp_datum=springAssembly.datums[temp_datum.id]\n');
fprintf(fID,'\n');
fprintf(fID,'\t\tconnector_len=((spring_coord[i][0]-ref_pt_top_center[0])**2+(spring_coord[i][1]-ref_pt_top_center[1])**2+(spring_coord[i][2]-ref_pt_top_center[2])**2)**0.5\n');
fprintf(fID,'\t\t#create elasticity for connector\n');
fprintf(fID,'\t\ttemp_behavior=connectorBehavior.ConnectorElasticity(behavior=NONLINEAR,table=((-radialspring_stiffness*(10*spring_initial_radius),\n');
fprintf(fID,'\t\t-(10*spring_initial_radius)),(0,-(connector_len-eps-spring_initial_radius)),(0,0),(radialspring_tension*(10*spring_initial_radius),(10*spring_initial_radius))),components=(1, ))\n');
fprintf(fID,'\t\t#connector section definition\n');
fprintf(fID,'\t\ttemp_sec=springModel.ConnectorSection(name=''non-linear-radial ''+str(i),translationalType=AXIAL,behaviorOptions=(temp_behavior,))\n');
fprintf(fID,'\t\t#create wire for connector\n');
fprintf(fID,'\t\tspringAssembly.WirePolyLine(points=((rp2),(rpi)),mergeType=IMPRINT, meshable=OFF)\n');
fprintf(fID,'\t\tedge=springAssembly.edges.findAt(((spring_coord[i][0]+ref_pt_top_center[0])/2,(spring_coord[i][1]+ref_pt_top_center[1])/2,(spring_coord[i][2]+ref_pt_top_center[2])/2))\n');
fprintf(fID,'\t\tcsa =springAssembly.SectionAssignment(region=(edge,),sectionName=temp_sec.name)\n');
fprintf(fID,'\t\tspringAssembly.ConnectorOrientation(region=csa.getSet(),localCsys1=temp_datum)\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'rpi = springInstance.vertices.getByBoundingSphere(center=spring_coord[0],radius=eps)\n');
fprintf(fID,'rpf = springInstance.vertices.getByBoundingSphere(center=spring_coord[-1],radius=eps)\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#now we need to create sets of bottomplate reference points and Top plate reference points\n');
fprintf(fID,'\n');
fprintf(fID,'bottomplateSet=springAssembly.Set(name=''Bottom Plate Ref pts'',referencePoints = tuple(bottomplateSet))\n');
fprintf(fID,'\n');
fprintf(fID,'topplateSet=springAssembly.Set(name=''Top Plate Ref pts'',referencePoints =tuple(topplateSet))\n');
fprintf(fID,'\n');
fprintf(fID,'bottomturnfirstSet=springAssembly.Set(name=''Bottom Turn 1st pt'',vertices = rpi)\n');
fprintf(fID,'\n');
fprintf(fID,'topturnlastSet=springAssembly.Set(name=''Top Turn last pt'',vertices = rpf)\n');
fprintf(fID,'\n');
fprintf(fID,'springAssembly.Set(name=''All Bottom Turn pts'',vertices = tuple(bottomturnSet))\n');
fprintf(fID,'\n');
fprintf(fID,'bottomturnSet=springAssembly.SetByBoolean(name=''Bottom Turn pts'', operation=DIFFERENCE, sets=(springAssembly.sets[''All Bottom Turn pts''], springAssembly.sets[''Bottom Turn 1st pt''], ))\n');
fprintf(fID,'\n');
fprintf(fID,'del springAssembly.sets[''All Bottom Turn pts'']\n');
fprintf(fID,'\n');
fprintf(fID,'springAssembly.Set(name=''All Top Turn pts'',vertices = tuple(topturnSet))\n');
fprintf(fID,'\n');
fprintf(fID,'topturnSet=springAssembly.SetByBoolean(name=''Top Turn pts'', operation=DIFFERENCE, sets=(springAssembly.sets[''All Top Turn pts''], springAssembly.sets[''Top Turn last pt''], ))\n');
fprintf(fID,'\n');
fprintf(fID,'del springAssembly.sets[''All Top Turn pts'']\n');
fprintf(fID,'\n');
fprintf(fID,'connectorSet=springAssembly.Set(edges=springAssembly.edges,name=''Conectors'')\n');
fprintf(fID,'\n');

%block for only top frictional spring
% fprintf(fID,'rpf = regionToolset.Region(vertices=rpf)\n');
% fprintf(fID,'#create a spring Dashpot connecting top turn last pt to a reference pt to simulate friction on plate\n');
% fprintf(fID,'#create reference pt for spring\n');
% fprintf(fID,'refpt_top_turn_spring=((spring_coord[-1][0]+pos_refpt_spring_topturn),(spring_coord[-1][1]),(spring_coord[-1][2]))\n');
% fprintf(fID,'springAssembly.ReferencePoint(refpt_top_turn_spring)\n');
% fprintf(fID,'rp5=springAssembly.referencePoints.findAt(refpt_top_turn_spring)\n');
% fprintf(fID,'frictionspringSet=springAssembly.Set(name=''top turn friction spring pt'',referencePoints = (rp5,))\n');
% fprintf(fID,'rp5=regionToolset.Region(referencePoints=(rp5,))\n');
% fprintf(fID,'#create connecting spring\n');
% fprintf(fID,'springAssembly.engineeringFeatures.TwoPointSpringDashpot(regionPairs=((rpf,rp5),),name=''friction spring top turn'',axis=NODAL_LINE,\n');
% fprintf(fID,'\t\t\t\t\t\t\t\t\t\tspringBehavior=ON,springStiffness=friction_spring_stiff)\n');

%block for creating both top and bottom frictional spring
fprintf(fID,'rpf = regionToolset.Region(vertices=rpf)\n');
fprintf(fID,'#create a spring Dashpot connecting top turn last pt to a reference pt to simulate friction on plate\n');
fprintf(fID,'#create reference pt for spring\n');
fprintf(fID,'refpt_top_turn_spring=((spring_coord[-1][0]),(spring_coord[-1][1]),(spring_coord[-1][2]+pos_refpt_spring_topturn))\n');
fprintf(fID,'springAssembly.ReferencePoint(refpt_top_turn_spring)\n');
fprintf(fID,'rp5=springAssembly.referencePoints.findAt(refpt_top_turn_spring)\n');
fprintf(fID,'topfrictionspringSet=springAssembly.Set(name=''top turn friction spring pt'',referencePoints = (rp5,))\n');
fprintf(fID,'rp5=regionToolset.Region(referencePoints=(rp5,))\n');
fprintf(fID,'#create connecting spring\n');
fprintf(fID,'springAssembly.engineeringFeatures.TwoPointSpringDashpot(regionPairs=((rpf,rp5),),name=''friction spring top turn'',axis=NODAL_LINE,\n');
fprintf(fID,'\t\t\t\t\t\t\t\t\t\tspringBehavior=ON,springStiffness=friction_spring_stiff_top)\n');
fprintf(fID,'\n');
fprintf(fID,'rpi = regionToolset.Region(vertices=rpi)\n');
fprintf(fID,'#create a spring Dashpot connecting top turn last pt to a reference pt to simulate friction on plate\n');
fprintf(fID,'#create reference pt for spring\n');
fprintf(fID,'refpt_bottom_turn_spring=((spring_coord[0][0]),(spring_coord[0][1]),(spring_coord[0][2]+pos_refpt_spring_topturn))\n');
fprintf(fID,'springAssembly.ReferencePoint(refpt_bottom_turn_spring)\n');
fprintf(fID,'rp6=springAssembly.referencePoints.findAt(refpt_bottom_turn_spring)\n');
fprintf(fID,'bottomfrictionspringSet=springAssembly.Set(name=''bottom turn friction spring pt'',referencePoints = (rp6,))\n');
fprintf(fID,'rp6=regionToolset.Region(referencePoints=(rp6,))\n');
fprintf(fID,'#create connecting spring\n');
fprintf(fID,'springAssembly.engineeringFeatures.TwoPointSpringDashpot(regionPairs=((rpi,rp6),),name=''friction spring bottom turn'',axis=NODAL_LINE,\n');
fprintf(fID,'\t\t\t\t\t\t\t\t\t\tspringBehavior=ON,springStiffness=friction_spring_stiff_bottom)\n');
%


fprintf(fID,'#------------------------------Assembly Created--------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Step--------------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Load Step ie type of analysis= Static + Non-Linear Geometry effects\n');
fprintf(fID,'"""\n');
fprintf(fID,'import step\n');
fprintf(fID,'#creating step for  static analysis with NonLinear Geometry option as ON\n');
fprintf(fID,'springStep=springModel.StaticStep(name=''Static'',previous=''Initial'',nlgeom=ON,maxNumInc=1000,initialInc=0.001, maxInc=0.05,minInc=1E-10,stabilizationMagnitude=0.0002,\n');
fprintf(fID,'\t\tstabilizationMethod=DAMPING_FACTOR, continueDampingFactors=False,adaptiveDampingRatio=0.05)\n');
fprintf(fID,'#------------------------------Steps created-----------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Load and BC-------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Boundary conditions\n');
fprintf(fID,'"""\n');
fprintf(fID,'import load\n');
fprintf(fID,'\n');
fprintf(fID,'springModel.DisplacementBC(name=''bottom plate BC'',createStepName=springStep.name,region=bottomplateSet,u2=0.0,ur1=0.0,ur2=0.0,ur3=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''top plate BC'',createStepName=springStep.name,region=topplateSet,u2=springDisplacement,ur1=0.0,ur2=0.0,ur3=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''bottom center BC'',createStepName=springStep.name,region=bottomcenterSet,u1=0.0,u2=0.0,u3=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''top center BC'',createStepName=springStep.name,region=topcenterSet,u1=0.0,u2=springDisplacement,u3=0.0)\n');
%fprintf(fID,'springModel.DisplacementBC(name=''bottom turn 1st pt BC'',createStepName=springStep.name,region=bottomturnfirstSet,u2=0.0,u3=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''bottom turn 1st pt BC'',createStepName=springStep.name,region=bottomturnfirstSet,u2=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''top turn last pt BC'',createStepName=springStep.name,region=topturnlastSet,u2=springDisplacement)#u1=0.0,\n');
fprintf(fID,'springModel.DisplacementBC(name=''bottom turn BC'',createStepName=springStep.name,region=bottomturnSet,u2=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''top turn BC'',createStepName=springStep.name,region=topturnSet,u2=springDisplacement)\n');
%fprintf(fID,'springModel.DisplacementBC(name=''friction spring ref pt BC'',createStepName=springStep.name,region=frictionspringSet,u1=0.0)\n');
% fprintf(fID,'springModel.DisplacementBC(name=''top friction spring ref pt BC'',createStepName=springStep.name,region=topfrictionspringSet,u1=0.0)\n');
fprintf(fID,'springModel.DisplacementBC(name=''bottom friction spring ref pt BC'',createStepName=springStep.name,region=bottomfrictionspringSet,u3=0.0)\n');

fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#-------------------------Load and BC created---------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------Job--------------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create Job\n');
fprintf(fID,'"""\n');
fprintf(fID,'import job\n');
fprintf(fID,'\n');
fprintf(fID,'springJob=mdb.Job(name=''springJob'', model= springModel.name, description='''', type=ANALYSIS,\n');
fprintf(fID,'\t\tatTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90,\n');
fprintf(fID,'\t\tmemoryUnits=PERCENTAGE, getMemoryFromAnalysis=True,\n');
fprintf(fID,'\t\texplicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF,\n');
fprintf(fID,'\t\tmodelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='''',\n');
fprintf(fID,'\t\tscratch='''', resultsFormat=ODB, multiprocessingMode=DEFAULT, numCpus=32,numDomains=32,\n');
fprintf(fID,'\t\tnumGPUs=0)\n');
fprintf(fID,'\n');
fprintf(fID,'springModel.FieldOutputRequest(name=''ReactionForces'', createStepName=springStep.name, variables=(''RT'',''U'', ))\n');
fprintf(fID,'springModel.FieldOutputRequest(name=''Connector forces'',\n');
fprintf(fID,'\t\tcreateStepName=springStep.name, variables=(''CTF'', ''CEF'', ''CU'', ''CUE'', ''CUP''),\n');
fprintf(fID,'\t\tregion=connectorSet, sectionPoints=DEFAULT, rebar=EXCLUDE)\n');
fprintf(fID,'\n');
fprintf(fID,'#submit job\n');
fprintf(fID,'springJob.submit(consistencyChecking=OFF)\n');
fprintf(fID,'springJob.waitForCompletion()\n');
fprintf(fID,'#------------------------------Job created------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#save file\n');
fprintf(fID,'mdb.saveAs(pathName= mainfilepath+''/My_Model''+''.cae'')\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------odb--------------------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Access the output database generated from the job and print out quantities of interest to txt files at current directory\n');
fprintf(fID,'"""\n');
fprintf(fID,'\n');
fprintf(fID,'import odb\n');
fprintf(fID,'from odbAccess import *\n');
fprintf(fID,'\n');
fprintf(fID,'odb  = openOdb(path = mainfilepath+''/''+springJob.name+''.odb'')\n');
fprintf(fID,'\n');
fprintf(fID,'#define regions for bottom center and bottom plate pts\n');
fprintf(fID,'springOdb=odb.rootAssembly\n');
fprintf(fID,'odb_bottomcenter_region= springOdb.nodeSets[''Bottom Center Ref pt'']\n');
fprintf(fID,'\n');
fprintf(fID,'odb_bottomplate_region= springOdb.nodeSets[''Bottom Plate Ref pts'']\n');
fprintf(fID,'odb_bottomturnfirst_region= springOdb.nodeSets[''Bottom Turn 1st pt'']\n');
fprintf(fID,'odb_bottomturn_region= springOdb.nodeSets[''Bottom Turn pts'']\n');
fprintf(fID,'odb_topcenter_region= springOdb.nodeSets[''Top Center Ref pt'']\n');
fprintf(fID,'\n');
fprintf(fID,'#loop over frames to populate the values of reaction force and displacement\n');
fprintf(fID,'sideforce = []\n');
fprintf(fID,'axialforce = []\n');
fprintf(fID,'displacement =[]\n');
fprintf(fID,'odbStep=odb.steps[springStep.name]\n');
fprintf(fID,'for i in range(len(odbStep.frames)):\n');
fprintf(fID,'\tdisplacement.append(abs(odbStep.frames[i].fieldOutputs[''U''].getSubset(region =odb_topcenter_region ).values[0].data[1]))#appending abs value of Uy of the top node ## note vlaues[0] days that we have only one node in this subset\n');
fprintf(fID,'\tsideforce.append(tuple(odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomcenter_region).values[0].data))# appending tuple as reaction value to side force\n');
fprintf(fID,'\n');
fprintf(fID,'\tbottomplate_reactions= odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomplate_region)\n');
fprintf(fID,'\ttempbp=0\n');
fprintf(fID,'\tfor ibp in range(len(bottomplate_reactions.values)):\n');
fprintf(fID,'\t\ttempbp=tempbp+bottomplate_reactions.values[ibp].data[1]# index 1 for Fy\n');
fprintf(fID,'\n');
fprintf(fID,'\tbottomturnfirst_reactions= odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomturnfirst_region).values[0].data[1]#again only one node in the subset\n');
fprintf(fID,'\n');
fprintf(fID,'\tbottomturn_reactions= odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomturn_region)\n');
fprintf(fID,'\ttempbt=0\n');
fprintf(fID,'\tfor ibt in range(len(bottomturn_reactions.values)):\n');
fprintf(fID,'\t\ttempbp=tempbp+bottomturn_reactions.values[ibt].data[1]# index 1 for Fy\n');
fprintf(fID,'\n');
fprintf(fID,'\taxialforce.append(tempbp+tempbt+bottomturnfirst_reactions)\n');
fprintf(fID,'\n');
fprintf(fID,'#print value of the above variables to a text file\n');
fprintf(fID,'fsideforce = open("sideforce.txt","w")\n');
fprintf(fID,'fsideforce.write("Side forces [Fx Fy Fz] at bottom center node\\n")\n');
fprintf(fID,'fsideforce.write(''0''+''	''+''0''+''	''+''0''+''\\n'')\n');
fprintf(fID,'for i in sideforce:\n');
fprintf(fID,'\tfsideforce.write(str(i[0])+''	''+str(i[1])+''	''+str(i[2])+''\\n'')\n');
fprintf(fID,'fsideforce.close()\n');
fprintf(fID,'\n');
fprintf(fID,'fdisplacement  = open("displacement.txt","w")\n');
fprintf(fID,'fdisplacement.write("displacement abs(Uy) of Top center node\\n")\n');
fprintf(fID,'fdisplacement.write(''0''+''\\n'')\n');
fprintf(fID,'for i in displacement:\n');
fprintf(fID,'\tfdisplacement.write(str(i)+''\\n'')\n');
fprintf(fID,'fdisplacement.close()\n');
fprintf(fID,'\n');
fprintf(fID,'faxialforce  = open("axialforce.txt","w")\n');
fprintf(fID,'faxialforce.write("sum of axial force Fy due to bottomplate+ bottomturn+ bottomturnfirst nodes\\n")\n');
fprintf(fID,'faxialforce.write(''0''+''\\n'')\n');
fprintf(fID,'for i in axialforce:\n');
fprintf(fID,'\tfaxialforce.write(str(i)+''\\n'')\n');
fprintf(fID,'faxialforce.close()\n');
fprintf(fID,'\n');
fprintf(fID,'#------------------------------odb created------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,strcat('statusfile  = open(mainfilepath+',q,'/status.txt',q,',',q,'w',q,')\n'));
fprintf(fID,'statusfile.write("0")\n');
fprintf(fID,'statusfile.close()\n');
fprintf(fID,'#session.viewports[''Spring Model''].setValues(displayObject=springPart)\n');
fclose(fID);
end
