function printpythoncode_solid(filepath,N,wire_dia,spring_height,spring_max_radius,...
    spring_initial_radius,plate_thickness,springyoungmodulus,friction_coeff,springmeshSize,platemeshSize)

% This function will print out the abaqus.py file with the corresponding
% geomteric paramters
q = char(39);
fID = fopen(strcat(filepath,'MyModel_solid.py'),'w');

fprintf(fID,'#-----------------------------SolidModel.py---------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#--------------------------Inputs from MATLAB-----------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Variables that will be given by Matlab\n');
fprintf(fID,'"""\n');
fprintf(fID,'#set working directory\n');
fprintf(fID,'import os\n');
fprintf(fID,strcat('mainfilepath = ',q,filepath(1:end-1),q,'# to be given by matlab\n'));
fprintf(fID,'os.chdir(mainfilepath)\n');
fprintf(fID,'\n');
fprintf(fID,'notinterferingfile  = open(mainfilepath+''/notinterfering.txt'',''w'')\n');
fprintf(fID,'notinterferingfile.write("1")\n');
fprintf(fID,'notinterferingfile.close()\n');
fprintf(fID,'\n');
fprintf(fID,'#-----------spring parameters-----------\n');
fprintf(fID,'#note dimensions are in mm we are using SI ''mm'' units so for stress we have MPa, Mass-tonne,density-tonne/mm**3\n');
fprintf(fID,strcat('wire_dia=',num2str(wire_dia) ,'#wire diameter (mm)\n'));
fprintf(fID,strcat('spring_initial_radius=',num2str(spring_initial_radius),' #initial radius of the spring (mm)\n'));
fprintf(fID,strcat('spring_max_radius=',num2str(spring_max_radius) ,'#maximum radius of the spring (mm)\n'));
fprintf(fID,strcat('spring_height=',num2str(spring_height),' #height of the spring (mm)\n'));
fprintf(fID,strcat('spring_Np=',num2str(N) ,'#number of points in the spring\n'));
fprintf(fID,'#--------parameters of the plates--------\n');
fprintf(fID,strcat('plate_thickness=',num2str(plate_thickness),' #plate thickness\n'));
fprintf(fID,'bottom_center= (0.0,0.0,0.0) #bottom plate center coordinate(tuple)#xyz to be in accordance with abaqus (loading in Y direction)\n');
fprintf(fID,'top_center= (0.0,spring_height+2*plate_thickness+wire_dia,0.0) #top plate center coordinates(tuple)#xyz to be in accordance with abaqus (loading in Y direction)\n');
fprintf(fID,'plate_radius=spring_max_radius*2\n');
fprintf(fID,'#-------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#Material properties variables (independent definition)\n');
fprintf(fID,strcat('springyoungmodulus=',num2str(springyoungmodulus),'#Mpa\n'));
fprintf(fID,'poissonratio=0.3\n');
fprintf(fID,strcat('springDisplacement=',num2str(1.5*25.4-(spring_height+(wire_dia))),'#mm\n'));% displacement is such that the final height of the spring is 1.5 inches
fprintf(fID,'plateyoungmodulus=207.0E3#MPa\n');
fprintf(fID,'\n');
fprintf(fID,strcat('bottomplatemeshSize=',num2str(platemeshSize),'\n'));
fprintf(fID,strcat('topplatemeshSize=',num2str(platemeshSize),'\n'));
fprintf(fID,strcat('springmeshSize=',num2str(springmeshSize),'\n'));
fprintf(fID,'\n');
fprintf(fID,'eps=10**-6\n');
fprintf(fID,strcat('friction_coeff=',num2str(friction_coeff),'\n'));
fprintf(fID,'#------------------------Read Coordinate Text File-------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Read xyz coordinates of the spring from the file\n');
fprintf(fID,'(This file is printed by MATLAB and path to be given by Matlab)\n');
fprintf(fID,'"""\n');
fprintf(fID,'##NOTE: MATLAB to give xyz coordinates such that the Z coordinates are in axial direction,\n');
fprintf(fID,'#we are doing a manipulation by interchangin Y and Z coordinates here\n');
fprintf(fID,'\n');
fprintf(fID,'filename=''coordinatefile''\n');
fprintf(fID,strcat('filepath= ',q,filepath,q,' + filename + ''.txt''\n'));
fprintf(fID,'fid=open(filepath,''r'')\n');
fprintf(fID,'spring_coord = [];spring_identifier=[]\n');
fprintf(fID,'for i in range(spring_Np):\n');
fprintf(fID,'\ttemp= fid.readline().split()\n');
fprintf(fID,'\ttemp=[float(j) for j in temp]#convert the coordinate strings to float and rotate using matrix [1 0 0, 0 0 1, 0 -1 0]\n');
fprintf(fID,'\tspring_identifier.append(temp[0])\n');
fprintf(fID,'\ta=temp[-2]\n');
fprintf(fID,'\ttemp[-2]=temp[-1]+plate_thickness+(wire_dia/2.0)#displaceing to correct the height\n');
fprintf(fID,'\ttemp[-1]=-a\n');
fprintf(fID,'\tspring_coord.append(temp[2:])\n');
fprintf(fID,'\n');
fprintf(fID,'fid.close\n');
fprintf(fID,'#--------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'#--------------------------------------------------------------------------#\n');
fprintf(fID,'#-------------------------ABAQUS Main File---------------------------------#\n');
fprintf(fID,'#--------------------------------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'"""\n');
fprintf(fID,'Abaqus scripting begins\n');
fprintf(fID,'"""\n');
fprintf(fID,'from abaqus import *\n');
fprintf(fID,'from abaqusConstants import *\n');
fprintf(fID,'\n');
fprintf(fID,'#creating a model\n');
fprintf(fID,'springModel=mdb.Model(name=''Spring'')\n');
fprintf(fID,'\n');
fprintf(fID,'#-----------------------------------Parts------------------------------------#\n');
fprintf(fID,'"""\n');
fprintf(fID,'Create all geometric parts and prepare them for adequate meshing by partitioning the surfaces\n');
fprintf(fID,'"""\n');
fprintf(fID,'import part\n');
fprintf(fID,'#------------part for bottom plate-----------------------------------------------------\n');
fprintf(fID,'#sketch of bottom plate\n');
fprintf(fID,'bottomplateSketch= springModel.ConstrainedSketch(name = ''Bottom Plate'', sheetSize=2*plate_radius)\n');
fprintf(fID,'temp = (bottom_center[0:2],(bottom_center[0],bottom_center[1]+plate_thickness+wire_dia),(bottom_center[0]+spring_initial_radius-wire_dia/2.0,bottom_center[1]+plate_thickness+wire_dia),\n');
fprintf(fID,'\t\t(bottom_center[0]+spring_initial_radius-wire_dia/2.0,bottom_center[1]+plate_thickness),(bottom_center[0]+plate_radius,bottom_center[1]+plate_thickness),\n');
fprintf(fID,'\t\t(bottom_center[0]+plate_radius,bottom_center[1]),bottom_center[0:2])\n');
fprintf(fID,'for i in range(len(temp)-1):\n');
fprintf(fID,'\tbottomplateSketch.Line(temp[i],temp[i+1])\n');
fprintf(fID,'bottomplateSketch.ConstructionLine(bottom_center[0:2],(bottom_center[0],bottom_center[1]+plate_thickness+wire_dia))\n');
fprintf(fID,'#create part for bottomplate\n');
fprintf(fID,'bottomplatePart = springModel.Part(name=''Bottom plate'',dimensionality= THREE_D, type=DEFORMABLE_BODY)\n');
fprintf(fID,'#revolve extrude bottom plate\n');
fprintf(fID,'bottomplatePart.BaseSolidRevolve(sketch=bottomplateSketch,angle=360)\n');
fprintf(fID,'#---------------------------------------------------------------------------------------\n');
fprintf(fID,'\n');
fprintf(fID,'##code for partitioning the Bottom Plate to get desired elements and node locations\n');
fprintf(fID,'bottomplatePart.DatumPointByCoordinate((bottom_center[0],bottom_center[1]+plate_thickness,bottom_center[2]))#center+plate thickness in y direction\n');
fprintf(fID,'bottomplatePart.DatumPointByCoordinate((bottom_center[0],bottom_center[1]+plate_thickness+wire_dia,bottom_center[2]))#y center of top face of bottom pug\n');
fprintf(fID,'bottomplatePart.DatumPointByCoordinate((bottom_center[0]+plate_radius,bottom_center[1]+plate_thickness,bottom_center[2]))#x+plate thickness in y direction\n');
fprintf(fID,'ptz=bottomplatePart.DatumPointByCoordinate((bottom_center[0],bottom_center[1]+plate_thickness,bottom_center[2]+plate_radius))#z+plate thickness in y direction\n');
fprintf(fID,'ptc=bottomplatePart.datums[2]## index 1 is reserved for the datum axis\n');
fprintf(fID,'pty=bottomplatePart.datums[3]\n');
fprintf(fID,'ptx=bottomplatePart.datums[4]\n');
fprintf(fID,'ptz=bottomplatePart.datums[5]\n');
fprintf(fID,'bottomplatePart.PartitionCellByPlaneThreePoints(cells=bottomplatePart.cells,point1=ptc,point2=ptx,point3=pty)\n');
fprintf(fID,'bottomplatePart.PartitionCellByPlaneThreePoints(cells=bottomplatePart.cells,point1=ptc,point2=ptz,point3=pty)\n');
fprintf(fID,'bottomplatePart.PartitionCellByPlaneThreePoints(cells=bottomplatePart.cells,point1=ptc,point2=ptz,point3=ptx)\n');
fprintf(fID,'\n');
fprintf(fID,'#------------part for top plate---------------------------------------------------------\n');
fprintf(fID,'#sketch of Top plate\n');
fprintf(fID,'topplateSketch= springModel.ConstrainedSketch(name = ''Top Plate'', sheetSize=2*plate_radius)\n');
fprintf(fID,'\n');
fprintf(fID,'temp = (top_center[0:2],(top_center[0],top_center[1]-plate_thickness-wire_dia),(top_center[0]+spring_initial_radius-wire_dia/2.0,top_center[1]-plate_thickness-wire_dia),\\\n');
fprintf(fID,'\t(top_center[0]+spring_initial_radius-wire_dia/2.0,top_center[1]-plate_thickness),(top_center[0]+plate_radius,top_center[1]-plate_thickness),\\\n');
fprintf(fID,'\t\t(top_center[0]+plate_radius,top_center[1]),top_center[0:2])\n');
fprintf(fID,'\n');
fprintf(fID,'for i in range(len(temp)-1):\n');
fprintf(fID,'\ttopplateSketch.Line(temp[i],temp[i+1])\n');
fprintf(fID,'topplateSketch.ConstructionLine(top_center[0:2],(top_center[0],top_center[1]-plate_thickness-wire_dia))\n');
fprintf(fID,'\n');
fprintf(fID,'#create part for topplate\n');
fprintf(fID,'topplatePart = springModel.Part(name=''top plate'',dimensionality= THREE_D, type=DEFORMABLE_BODY)\n');
fprintf(fID,'#revolve extrude top plate\n');
fprintf(fID,'\n');
fprintf(fID,'topplatePart.BaseSolidRevolve(sketch =topplateSketch,angle=360)\n');
fprintf(fID,'#----------------------------------------------------------------------------------------\n');
fprintf(fID,'\n');
fprintf(fID,'##code for partitioning top Plate\n');
fprintf(fID,'topplatePart.DatumPointByCoordinate((top_center[0],top_center[1]-plate_thickness,top_center[2]))#center-plate thickness in y direction\n');
fprintf(fID,'topplatePart.DatumPointByCoordinate((top_center[0],top_center[1]-plate_thickness-wire_dia,top_center[2]))#pty center of top face of bottom pug\n');
fprintf(fID,'topplatePart.DatumPointByCoordinate((top_center[0]+plate_radius,top_center[1]-plate_thickness,top_center[2]))#ptx-plate thickness in y direction\n');
fprintf(fID,'ptz=topplatePart.DatumPointByCoordinate((top_center[0],top_center[1]-plate_thickness,top_center[2]+plate_radius))#ptz-plate thickness in y direction\n');
fprintf(fID,'ptc=topplatePart.datums[2]## index 1 is reserved for the datum axis\n');
fprintf(fID,'pty=topplatePart.datums[3]\n');
fprintf(fID,'ptx=topplatePart.datums[4]\n');
fprintf(fID,'ptz=topplatePart.datums[5]\n');
fprintf(fID,'topplatePart.PartitionCellByPlaneThreePoints(cells=topplatePart.cells,point1=ptc,point2=ptx,point3=pty)\n');
fprintf(fID,'topplatePart.PartitionCellByPlaneThreePoints(cells=topplatePart.cells,point1=ptc,point2=ptz,point3=pty)\n');
fprintf(fID,'topplatePart.PartitionCellByPlaneThreePoints(cells=topplatePart.cells,point1=ptc,point2=ptz,point3=ptx)\n');
fprintf(fID,'\n');
fprintf(fID,'#------part for spring-------------------------------------------------------------------\n');
fprintf(fID,'#create a part for the spring\n');
fprintf(fID,'springPart = springModel.Part(name=''Spring'',dimensionality= THREE_D, type=DEFORMABLE_BODY)\n');
fprintf(fID,'#creating wire spline for the spring using sprign coordinates\n');
fprintf(fID,'#springWire=springPart.WirePolyLine(points=spring_coord,mergeType=SEPARATE, meshable=ON, smoothClosedSpline=ON)\n');
fprintf(fID,'\n');
fprintf(fID,'#--Solid Spring----#\n');
fprintf(fID,'##springPart.WirePolyLine(points=spring_coord,mergeType=SEPARATE, meshable=ON, smoothClosedSpline=ON)\n');
fprintf(fID,'springPart.WireSpline(points=spring_coord,mergeType=SEPARATE, meshable=ON, smoothClosedSpline=OFF)\n');
fprintf(fID,'springPart.DatumPointByCoordinate((bottom_center[0],bottom_center[1],bottom_center[2]))#center\n');
fprintf(fID,'springPart.DatumPointByCoordinate((bottom_center[0],bottom_center[1]+plate_thickness+wire_dia,bottom_center[2]))#y center of top face of bottom pug\n');
fprintf(fID,'springPart.DatumPointByCoordinate((bottom_center[0]+plate_radius,bottom_center[1],bottom_center[2]))#x\n');
fprintf(fID,'p1=springPart.datums[2]\n');
fprintf(fID,'p2=springPart.datums[3]\n');
fprintf(fID,'p3=springPart.datums[4]\n');
fprintf(fID,'springPart.DatumPlaneByThreePoints(point1=p1,point2=p2,point3=p3)\n');
fprintf(fID,'springPart.DatumAxisByTwoPoint(point1=p1,point2=p2)\n');
fprintf(fID,'springSketch= springModel.ConstrainedSketch(name = ''Spring'', sheetSize=2*wire_dia)\n');
fprintf(fID,'springSketch.CircleByCenterPerimeter(center=(-spring_coord[0][0],spring_coord[0][1]),point1=(-spring_coord[0][0]+wire_dia/2.0,spring_coord[0][1]))# in local sketch coordinate system the center is at such a position got this from macro recording\n');
fprintf(fID,'wireregion = springPart.edges\n');
fprintf(fID,'temp=wireregion.getMask()#to convert edge array object to a sequence got this from the macro recording\n');
fprintf(fID,'wireregion=wireregion.getSequenceFromMask(mask=temp)\n');
fprintf(fID,'\n');
fprintf(fID,'notinterfering = 1\n');
fprintf(fID,'try:\n');
fprintf(fID,'\tspringPart.SolidSweep(path=wireregion,profile=springSketch,sketchPlane=springPart.datums[5],sketchUpEdge=springPart.datums[6],sketchOrientation=RIGHT)\n');
fprintf(fID,'except AbaqusException:\n');
fprintf(fID,'\tnotinterfering = 0\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'if notinterfering:\n');
fprintf(fID,'\t#------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t#----------------------------------------------------------------------------------------\n');
fprintf(fID,'\t#------------------------Parts and mesh creadted-------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Material----------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Materials with material properties for plate and spring\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport material\n');
fprintf(fID,'\t#create material\n');
fprintf(fID,'\tspringMaterial = springModel.Material(name=''Spring Material'',description=''spring steel'')\n');
fprintf(fID,'\tplateMaterial = springModel.Material(name=''Plate Material'', description=''mild steel'')\n');
fprintf(fID,'\t#assign youngs modulus and poissons ratio to both the materials\n');
fprintf(fID,'\tspringelasticProperties= (springyoungmodulus,poissonratio)\n');
fprintf(fID,'\tplateelasticProperties= (plateyoungmodulus,poissonratio)\n');
fprintf(fID,'\tspringMaterial.Elastic(table=(springelasticProperties,))\n');
fprintf(fID,'\tplateMaterial.Elastic(table=(plateelasticProperties,))\n');
fprintf(fID,'\t#--------------------------------Materials Created---------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Section ----------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Sections for the different Properties and assign them to the respective parts\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport section\n');
fprintf(fID,'\t#creating solid section for plates\n');
fprintf(fID,'\tplateSection = springModel.HomogeneousSolidSection(name=''Plate Section'',material=plateMaterial.name)\n');
fprintf(fID,'\t#section assignment to plates\n');
fprintf(fID,'\ttopplatePart.SectionAssignment(region=(topplatePart.cells,),sectionName=plateSection.name)\n');
fprintf(fID,'\tbottomplatePart.SectionAssignment(region=(bottomplatePart.cells,),sectionName=plateSection.name)\n');
fprintf(fID,'\t#creating solid section for spring\n');
fprintf(fID,'\tspringSection = springModel.HomogeneousSolidSection(name=''Spring Section'',material=springMaterial.name)\n');
fprintf(fID,'\t#section assignements to spring\n');
fprintf(fID,'\twirecell = springPart.cells\n');
fprintf(fID,'\twirecell = wirecell.getSequenceFromMask((''[#1]'',),)#got this from macro reading\n');
fprintf(fID,'\timport regionToolset\n');
fprintf(fID,'\twireregion = regionToolset.Region(cells = wirecell)\n');
fprintf(fID,'\tspringPart.SectionAssignment(region=wireregion,sectionName = springSection.name)\n');
fprintf(fID,'\n');
fprintf(fID,'\t#-----------------------------Sections created-------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Assembly----------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tAssemble instances of the parts into a global coordinate system\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport assembly\n');
fprintf(fID,'\t#create part instances\n');
fprintf(fID,'\tspringAssembly =springModel.rootAssembly\n');
fprintf(fID,'\tspringInstance=springAssembly.Instance(name=''Spring Instance'',part=springPart,dependent=OFF)\n');
fprintf(fID,'\tbottomplateInstance=springAssembly.Instance(name=''Bottom Plate Instance'',part=bottomplatePart,dependent=OFF)\n');
fprintf(fID,'\ttopplateInstance=springAssembly.Instance(name=''Top Plate Instance'',part=topplatePart,dependent=OFF)\n');
fprintf(fID,'\t#------------------------------Assembly Created--------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Mesh----------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Mesh for the instances in the assembly and create sets of nodes for application of BC\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\n');
fprintf(fID,'\t##code for generating mesh on the bottom plate\n');
fprintf(fID,'\timport mesh\n');
fprintf(fID,'\t#select type of element and assign to the instance\n');

% fprintf(fID,'\t#elemType = mesh.ElemType(elemCode=C3D8,elemLibrary=STANDARD)\n');
fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8R,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8I,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
fprintf(fID,'\telemType2 = mesh.ElemType(elemCode=C3D6,elemLibrary=STANDARD)\n');
fprintf(fID,'\telemType3 = mesh.ElemType(elemCode=C3D4,elemLibrary=STANDARD)\n');
fprintf(fID,'\tspringAssembly.setElementType(regions=(bottomplateInstance.cells,),elemTypes=(elemType1,elemType2,elemType3))\n');
%fprintf(fID,'\tspringAssembly.setElementType(regions=(bottomplateInstance.cells,),elemTypes=(elemType,))\n');

fprintf(fID,'\t#seed the instance\n');
fprintf(fID,'\tspringAssembly.seedPartInstance(regions=(bottomplateInstance,),size=bottomplatemeshSize)\n');
fprintf(fID,'\t###mesh the instance\n');
fprintf(fID,'\tspringAssembly.generateMesh(regions=(bottomplateInstance,))\n');
fprintf(fID,'\n');
fprintf(fID,'\t##create sets for boundary conditions\n');
fprintf(fID,'\tbottomplatecenterSet=bottomplateInstance.nodes.getByBoundingSphere((bottom_center[0],bottom_center[1],bottom_center[2]),eps)\n');
fprintf(fID,'\tbottomplateSet=bottomplateInstance.nodes.getByBoundingBox(xMin=bottom_center[0]-1.1*plate_radius,yMin=bottom_center[1]-eps,zMin=bottom_center[2]-1.1*plate_radius,\\\n');
fprintf(fID,'\t\t\t\t\t\t\t\t\t\t\t\t\t\txMax=bottom_center[0]+1.1*plate_radius,yMax=bottom_center[1]+eps,zMax=bottom_center[2]+1.1*plate_radius)\n');
fprintf(fID,'\tbottomplateZSet=bottomplateInstance.nodes.getByBoundingSphere((bottom_center[0],bottom_center[1],bottom_center[2]+plate_radius),eps)\n');
fprintf(fID,'\n');
fprintf(fID,'\t#creating sets\n');
fprintf(fID,'\tbottomplatecenterSet=springAssembly.Set(name=''Bottom Plate Center Set'',nodes = bottomplatecenterSet)\n');
fprintf(fID,'\tspringAssembly.Set(name=''Bottom Plate all Set'',nodes = bottomplateSet)\n');
fprintf(fID,'\tbottomplateZSet=springAssembly.Set(name=''Bottom Plate Z-Node Set'',nodes=bottomplateZSet)\n');
fprintf(fID,'\tspringAssembly.SetByBoolean(name=''Bottom Plate Set-Z'', operation=DIFFERENCE, sets=(springAssembly.sets[''Bottom Plate all Set''], springAssembly.sets[''Bottom Plate Z-Node Set''], ))\n');
fprintf(fID,'\tbottomplateSet=springAssembly.SetByBoolean(name=''Bottom Plate Set'', operation=DIFFERENCE, sets=(springAssembly.sets[''Bottom Plate Set-Z''], springAssembly.sets[''Bottom Plate Center Set''], ))\n');
fprintf(fID,'\tdel springAssembly.sets[''Bottom Plate all Set'']\n');
fprintf(fID,'\tdel springAssembly.sets[''Bottom Plate Set-Z'']\n');
fprintf(fID,'\n');
fprintf(fID,'\t##code for generating mesh on the top plate\n');
fprintf(fID,'\t#select type of element and assign to the instance\n');

% fprintf(fID,'\t#elemType = mesh.ElemType(elemCode=C3D8,elemLibrary=STANDARD)\n');
fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8R,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8I,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
fprintf(fID,'\telemType2 = mesh.ElemType(elemCode=C3D6,elemLibrary=STANDARD)\n');
fprintf(fID,'\telemType3 = mesh.ElemType(elemCode=C3D4,elemLibrary=STANDARD)\n');
fprintf(fID,'\tspringAssembly.setElementType(regions=(topplateInstance.cells,),elemTypes=(elemType1,elemType2,elemType3))\n');
% fprintf(fID,'\t#springAssembly.setElementType(regions=(topplateInstance.cells,),elemTypes=(elemType,))\n');

fprintf(fID,'\t#seed the instance\n');
fprintf(fID,'\tspringAssembly.seedPartInstance(regions=(topplateInstance,),size=topplatemeshSize)\n');
fprintf(fID,'\t#mesh the instance\n');
fprintf(fID,'\tspringAssembly.generateMesh(regions=(topplateInstance,))\n');
fprintf(fID,'\t##create sets for boundary conditions\n');
fprintf(fID,'\ttopplatecenterSet=topplateInstance.nodes.getByBoundingSphere((top_center[0],top_center[1],top_center[2]),eps)\n');
fprintf(fID,'\ttopplateSet=topplateInstance.nodes.getByBoundingBox(xMin=top_center[0]-1.1*plate_radius,yMin=top_center[1]-10*eps,zMin=top_center[2]-1.1*plate_radius,\\\n');
fprintf(fID,'\t\t\t\t\t\t\t\t\t\t\t\t\t\txMax=top_center[0]+1.1*plate_radius,yMax=top_center[1]+10*eps,zMax=top_center[2]+1.1*plate_radius)\n');
fprintf(fID,'\ttopplateZSet=topplateInstance.nodes.getByBoundingSphere((top_center[0],top_center[1],top_center[2]+plate_radius),eps)\n');
fprintf(fID,'\n');
fprintf(fID,'\t#creating sets\n');
fprintf(fID,'\ttopplatecenterSet=springAssembly.Set(name=''Top Plate Center Set'',nodes = topplatecenterSet)\n');
fprintf(fID,'\tspringAssembly.Set(name=''Top Plate all Set'',nodes = topplateSet)\n');
fprintf(fID,'\ttopplateZSet=springAssembly.Set(name=''Top Plate Z-Node Set'',nodes=topplateZSet)\n');
fprintf(fID,'\tspringAssembly.SetByBoolean(name=''Top Plate Set-Z'', operation=DIFFERENCE, sets=(springAssembly.sets[''Top Plate all Set''], springAssembly.sets[''Top Plate Z-Node Set''], ))\n');
fprintf(fID,'\ttopplateSet=springAssembly.SetByBoolean(name=''Top Plate Set'', operation=DIFFERENCE, sets=(springAssembly.sets[''Top Plate Set-Z''], springAssembly.sets[''Top Plate Center Set''], ))\n');
fprintf(fID,'\tdel springAssembly.sets[''Top Plate all Set'']\n');
fprintf(fID,'\tdel springAssembly.sets[''Top Plate Set-Z'']\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t##code for meshing the spring\n');
fprintf(fID,'\t#select type of element and assign to the instance\n');

% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
%fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8R,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D8I,elemLibrary=STANDARD,secondOrderAccuracy=OFF, distortionControl=DEFAULT)\n');
fprintf(fID,'\telemType2 = mesh.ElemType(elemCode=C3D6,elemLibrary=STANDARD)\n');
fprintf(fID,'\telemType3 = mesh.ElemType(elemCode=C3D4,elemLibrary=STANDARD)\n');


% fprintf(fID,'\telemType1 = mesh.ElemType(elemCode=C3D20R,elemLibrary=STANDARD)\n');
% fprintf(fID,'\telemType2 = mesh.ElemType(elemCode=C3D15,elemLibrary=STANDARD)\n');
% fprintf(fID,'\telemType3 = mesh.ElemType(elemCode=C3D10,elemLibrary=STANDARD)\n');
fprintf(fID,'\tspringAssembly.setElementType(regions=(springInstance.cells,),elemTypes=(elemType1,elemType2,elemType3))\n');


fprintf(fID,'\t#seed the instance\n');
fprintf(fID,'\tspringAssembly.seedPartInstance(regions=(springInstance,),size=springmeshSize)\n');
fprintf(fID,'\t#mesh the instance\n');
fprintf(fID,'\tspringAssembly.generateMesh(regions=(springInstance,))\n');
fprintf(fID,'\t#create sets for boundary conditions\n');
fprintf(fID,'\tspringbottomSet=springInstance.nodes.getByBoundingSphere(spring_coord[0],eps)\n');
fprintf(fID,'\tspringtopSet=springInstance.nodes.getByBoundingSphere(spring_coord[-1],eps)\n');
fprintf(fID,'\t#create sets\n');
fprintf(fID,'\tspringbottomSet=springAssembly.Set(name=''Spring Bottom Node Set'',nodes = springbottomSet)\n');
fprintf(fID,'\tspringtopSet=springAssembly.Set(name=''Spring Top Node Set'',nodes = springtopSet)\n');
fprintf(fID,'\t#------------------------------Mesh created--------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Step--------------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Load Step ie type of analysis= Static + Non-Linear Geometry effects\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport step\n');
fprintf(fID,'\t#creating step for  static analysis with NonLinear Geometry option as ON\n');
fprintf(fID,'\tspringStep=springModel.StaticStep(name=''Static'',previous=''Initial'',nlgeom=ON,maxNumInc=1000,initialInc=0.001, maxInc=0.05,minInc=1E-10,stabilizationMagnitude=0.0002,\n');
fprintf(fID,'\tstabilizationMethod=DAMPING_FACTOR, continueDampingFactors=False,adaptiveDampingRatio=0.05)\n');
fprintf(fID,'\t#------------------------------Steps created-----------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Interaction------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Contacts between the plates and spring\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport interaction\n');
fprintf(fID,'\n');
fprintf(fID,'\tspringModel.ContactProperty(''contact property'')\n');
fprintf(fID,'\tspringModel.interactionProperties[''contact property''].NormalBehavior(pressureOverclosure=HARD, allowSeparation=ON,\n');
fprintf(fID,'\tconstraintEnforcementMethod=DEFAULT)\n');

%frictionless tangential behavior
% fprintf(fID,'\tspringModel.interactionProperties[''contact property''].TangentialBehavior(formulation=FRICTIONLESS)\n');
%

%frictional tangential behavior
fprintf(fID,'\tspringModel.interactionProperties[''contact property''].TangentialBehavior(formulation=PENALTY, directionality=ISOTROPIC, slipRateDependency=OFF,\n');
fprintf(fID,'\t\t\tpressureDependency=OFF, temperatureDependency=OFF, dependencies=0,\n');
fprintf(fID,'\t\t\ttable=((friction_coeff, ), ), shearStressLimit=None, maximumElasticSlip=FRACTION,\n');
fprintf(fID,'\t\t\tfraction=0.005, elasticSlipStiffness=None)\n');
%

fprintf(fID,'\n');
fprintf(fID,'\tspringModel.StdInitialization(name=''contact initialisation'')\n');
fprintf(fID,'\n');
fprintf(fID,'\tspringModel.ContactStd(name=''general contact interaction'',\n');
fprintf(fID,'\t\t\tcreateStepName=''Initial'')\n');
fprintf(fID,'\n');
fprintf(fID,'\tspringModel.interactions[''general contact interaction''].includedPairs.setValuesInStep(stepName=''Initial'', useAllstar=ON)\n');
fprintf(fID,'\n');
fprintf(fID,'\tspringModel.interactions[''general contact interaction''].contactPropertyAssignments.appendInStep(stepName=''Initial'',\n');
fprintf(fID,'\tassignments=((GLOBAL, SELF, ''contact property''), ))\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#-------------------------Interaction created---------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Load and BC-------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Boundary conditions\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport load\n');
fprintf(fID,'\t#create BC at the bottom plate\n');
fprintf(fID,'\t# bottom center node restricted in xyz\n');
fprintf(fID,'\t#other nodes are free to move in x and z directions and given a fixed displacement of 0.0 in Y direction\n');
fprintf(fID,'\t#node on the Z axis is not allowed to move in x direction to avoid roataion of the plate\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Bottom Plate Center BC'',createStepName=springStep.name,region=bottomplatecenterSet,u1=0.0,u2=0.0,u3=0.0)\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Bottom Plate BC'',createStepName=springStep.name,region=bottomplateSet,u2=0.0)#loading is in Y direction\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Bottom Plate Z-Node BC'',createStepName=springStep.name,region=bottomplateZSet,u1=0.0,u2=0.0)#to avoid rotation\n');
fprintf(fID,'\t#create BC at the Top plate\n');
fprintf(fID,'\t# Top center node given a forced displacement of value ''springDisplacement''\n');
fprintf(fID,'\t#other nodes are free to move in x and z directions and given a fixed displacement of ''springDisplacement'' in Y direction\n');
fprintf(fID,'\t#node on the Z axis is not allowed to move in x direction to avoid roataion of the plate\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Top Plate Center BC'',createStepName=springStep.name,region=topplatecenterSet,u1=0.0,u2=springDisplacement,u3=0.0)\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Top Plate BC'',createStepName=springStep.name,region=topplateSet,u2=springDisplacement)#loading is in Y direction\n');
fprintf(fID,'\tspringModel.DisplacementBC(name=''Top Plate Z-Node BC'',createStepName=springStep.name,region=topplateZSet,u1=0.0,u2=springDisplacement)#to avoid rotation\n');
fprintf(fID,'\t###create boundary conditions for spring to avoid rigid body rotation of the spring along Y axis\n');

%if frictionless then swithch on these BC
% fprintf(fID,'\tspringModel.DisplacementBC(name=''Spring Bottom Node BC'',createStepName=springStep.name,region=springbottomSet,u3=0.0)#out of plane restriction of starting node in Z direction\n');
% fprintf(fID,'\tspringModel.DisplacementBC(name=''Spring Top Node BC'',createStepName=springStep.name,region=springtopSet,u1=0.0)#out of plane restriction of ending node in X direction\n');
%

fprintf(fID,'\t#-------------------------Load and BC created---------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------Job--------------------------------------------------#\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tCreate Job\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\timport job\n');
fprintf(fID,'\t#create job\n');
fprintf(fID,'\tspringJob=mdb.Job(name=''springJob'', model= springModel.name, description='''', type=ANALYSIS,\n');
fprintf(fID,'\t\tatTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90,\n');
fprintf(fID,'\t\tmemoryUnits=PERCENTAGE, getMemoryFromAnalysis=True,\n');
fprintf(fID,'\t\texplicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF,\n');
fprintf(fID,'\t\tmodelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='''',\n');
fprintf(fID,'\t\tscratch='''', resultsFormat=ODB, multiprocessingMode=DEFAULT, numCpus=32,numDomains=32,\n');
fprintf(fID,'\t\tnumGPUs=32)\n');
fprintf(fID,'\n');
fprintf(fID,'\tspringModel.FieldOutputRequest(name=''ReactionForces'', createStepName=springStep.name, variables=(''RT'',''U'', ))\n');
fprintf(fID,'\tspringModel.FieldOutputRequest(name=''ContactPressure'', createStepName=springStep.name, variables=(''CSTRESS'',''CSTATUS'', ))\n');
fprintf(fID,'\n');
fprintf(fID,'\t#submit job\n');
fprintf(fID,'\tspringJob.submit(consistencyChecking=OFF)\n');
fprintf(fID,'\tspringJob.waitForCompletion()\n');
fprintf(fID,'\t#------------------------------Job created------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t#save file\n');
fprintf(fID,'\tmdb.saveAs(pathName= mainfilepath+''/My_Model_solid''+''.cae'')\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------odb--------------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\tAccess the output database generated from the job and print out quantities of interest to txt files at current directory\n');
fprintf(fID,'\t"""\n');
fprintf(fID,'\n');
fprintf(fID,'\timport odb\n');
fprintf(fID,'\tfrom odbAccess import *\n');
fprintf(fID,'\n');
fprintf(fID,'\todb  = openOdb(path = mainfilepath+''/''+springJob.name+''.odb'')\n');
fprintf(fID,'\n');
fprintf(fID,'\t#define regions for bottom center and bottom plate pts\n');
fprintf(fID,'\tspringOdb=odb.rootAssembly\n');
fprintf(fID,'\todb_bottomcenter_region= springOdb.nodeSets[''Bottom Plate Center Set'']\n');
% bottom Z node region
fprintf(fID,'\todb_bottomznode_region= springOdb.nodeSets[''Bottom Plate Z-Node Set'']\n');
%
fprintf(fID,'\n');
fprintf(fID,'\todb_bottomplate_region= springOdb.nodeSets[''Bottom Plate Set'']\n');
fprintf(fID,'\t##odb_bottomturnfirst_region= springOdb.nodeSets[''Bottom Turn 1st pt'']\n');
fprintf(fID,'\t##odb_bottomturn_region= springOdb.nodeSets[''Bottom Turn pts'']\n');
fprintf(fID,'\todb_topcenter_region= springOdb.nodeSets[''Top Plate Center Set'']\n');
fprintf(fID,'\n');
fprintf(fID,'\t#loop over frames to populate the values of reaction force and displacement\n');
fprintf(fID,'\tsideforce = []\n');
fprintf(fID,'\taxialforce = []\n');
fprintf(fID,'\tdisplacement =[]\n');
fprintf(fID,'\todbStep=odb.steps[springStep.name]\n');
fprintf(fID,'\tfor i in range(len(odbStep.frames)):\n');
fprintf(fID,'\t\tdisplacement.append(abs(odbStep.frames[i].fieldOutputs[''U''].getSubset(region =odb_topcenter_region ).values[0].data[1]))#appending abs value of Uy of the top node ## note vlaues[0] days that we have only one node in this subset\n');
% 
% w/o contribution of Z node only center node
% fprintf(fID,'\t\tsideforce.append(tuple(odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomcenter_region).values[0].data))# appending tuple as reaction value to side force\n');
% adding contribution of Z node to center node
fprintf(fID,'\t\tsideforce.append(tuple([sum(lists) for lists in zip(odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomcenter_region).values[0].data,odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomznode_region).values[0].data)] ))# appending tuple as reaction value to side force\n');
%
fprintf(fID,'\n');
fprintf(fID,'\t\tbottomplate_reactions= odbStep.frames[i].fieldOutputs[''RT''].getSubset(region =odb_bottomplate_region)\n');
fprintf(fID,'\t\ttempbp=0\n');
fprintf(fID,'\t\tfor ibp in range(len(bottomplate_reactions.values)):\n');
fprintf(fID,'\t\t\ttempbp=tempbp+bottomplate_reactions.values[ibp].data[1]# index 1 for Fy\n');
fprintf(fID,'\n');
fprintf(fID,'\t\taxialforce.append(tempbp)\n');
fprintf(fID,'\n');
fprintf(fID,'\t#print value of the above variables to a text file\n');
fprintf(fID,'\tfsideforce = open("sideforce.txt","w")\n');
fprintf(fID,'\tfsideforce.write("Side forces [Fx Fy Fz] at bottom center node\\n")\n');
fprintf(fID,'\tfor i in sideforce:\n');
fprintf(fID,'\t\tfsideforce.write(str(i[0])+''	''+str(i[1])+''	''+str(i[2])+''\\n'')\n');
fprintf(fID,'\tfsideforce.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\tfdisplacement  = open("displacement.txt","w")\n');
fprintf(fID,'\tfdisplacement.write("displacement abs(Uy) of Top center node\\n")\n');
fprintf(fID,'\tfor i in displacement:\n');
fprintf(fID,'\t\tfdisplacement.write(str(i)+''\\n'')\n');
fprintf(fID,'\tfdisplacement.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\tfaxialforce  = open("axialforce.txt","w")\n');
fprintf(fID,'\tfaxialforce.write("sum of axial force Fy due to bottomplate\\n")\n');
fprintf(fID,'\tfor i in axialforce:\n');
fprintf(fID,'\t\tfaxialforce.write(str(i)+''\\n'')\n');
fprintf(fID,'\tfaxialforce.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\t#------------------------------odb created------------------------------------------#\n');
fprintf(fID,'\n');
fprintf(fID,'\n');
fprintf(fID,'else:\n');
fprintf(fID,'\t#print the files with all zeros and only one row of data\n');
fprintf(fID,'\tnotinterferingfile  = open(mainfilepath+''/notinterfering.txt'',''w'')\n');
fprintf(fID,'\tnotinterferingfile.write("0")\n');
fprintf(fID,'\tnotinterferingfile.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\t#save file\n');
fprintf(fID,'\tmdb.saveAs(pathName= mainfilepath+''/My_Model_solid''+''.cae'')\n');
fprintf(fID,'\n');
fprintf(fID,'\t#create the o/p files as matlab will be looking for them\n');
fprintf(fID,'\tfsideforce = open("sideforce.txt","w")\n');
fprintf(fID,'\tfsideforce.write("Side forces [Fx Fy Fz] at bottom center node\\n")\n');
fprintf(fID,'\tfsideforce.write(''0''+''	''+''0''+''	''+''0''+''\\n'')\n');
fprintf(fID,'\tfsideforce.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\tfdisplacement  = open("displacement.txt","w")\n');
fprintf(fID,'\tfdisplacement.write("displacement abs(Uy) of Top center node\\n")\n');
fprintf(fID,'\tfdisplacement.write(''0''+''\\n'')\n');
fprintf(fID,'\tfdisplacement.close()\n');
fprintf(fID,'\n');
fprintf(fID,'\tfaxialforce  = open("axialforce.txt","w")\n');
fprintf(fID,'\tfaxialforce.write("sum of axial force Fy due to bottomplate\\n")\n');
fprintf(fID,'\tfaxialforce.write(''0''+''\\n'')\n');
fprintf(fID,'\tfaxialforce.close()\n');
fclose(fID);

end
